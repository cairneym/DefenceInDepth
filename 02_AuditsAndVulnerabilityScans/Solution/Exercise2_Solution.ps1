# Check whether the user is already logged in - prompt if not
$context = Get-AzContext

if (!$context) 
{
    Connect-AzAccount 
} 

# Make sure you are in the correct Context - this should return your Azure Tenant
Get-AzContext

# Make sure the required modules are installed
$azInstalled = $(Get-InstalledModule | Where-Object {($_.name -eq 'Az') -and ($_.Version -eq '4.4.0')}).name
if (-not($azInstalled)) {
    Write-Host -ForegroundColor green "Script requires the Az module at a minimum verion 4.4. Updating ..."
    Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
    Install-Module Az -MinimumVersion 4.4 -Scope CurrentUser -AllowClobber -Force
    Write-Host -ForegroundColor green " ... complete"
}
Import-Module Az -MinimumVersion 4.4 -Force

# Prompt for the ServerName that we want to alter 
$uniquifier = Read-Host -Prompt "Enter the 5 character uniquifier that was used for creating your resources "
$sqlServer = "$(Read-Host -Prompt 'Enter the SQL Server name (without uniquifier extension)')-$uniquifier"

# Make sure that the SQL Server has a System Managed Identity
## We need the following:
##     Check whether the SQL Server has an Identity
##     Add it if not
try {
    $sp = Get-AzADServicePrincipal -DisplayName "$sqlServer"
    if (-not($sp)){
        Set-AzSqlServer -ResourceGroupName NDC-Test -ServerName "$sqlServer" -AssignIdentity | Out-Null
        $sp = Get-AzADServicePrincipal -DisplayName "$sqlServer"
    }
} catch {
    throw "$($_.Exception.InnerException.Message)"
}


# Create 2 new Storage Accopunts - one for Audits and one for VulnerabilityScans
## We need the following:
##     Create the basic Storage Account
##     For the Vulnerability Storage Account, allow the VNET Firewall Rule
##     Grant the Storage Blob Data Contributor access to each Storage Account for the SQL Server identity
try {
    $storagePrefixes = @("audit", "vulnerability")
    $storagePrefixes | ForEach-Object {
        # First, build the storage account name from the prefix and uniquifier
        $storageAccountName=$("sql$_$uniquifier").ToLower()
        Write-Host -ForegroundColor Yellow "Creating Storage Account named $storageAccountName"

        # Deploy the Storage Account
        ## First get the VM subnet so we can update the storage when required for firewall access
        $subnetID = $(Get-AzSqlServerVirtualNetworkRule -ResourceGroupName NDC-Test -ServerName $sqlServer).VirtualNetworkSubnetId
        $subnetName = $subnetID.Substring($subnetID.LastIndexOf('/')+1)
        $subnet = Get-AzVirtualNetworkSubnetConfig -VirtualNetwork $(Get-AzVirtualNetwork -ResourceGroupName NDC-Test -Name NDC-VirtualNetwork) -Name $subnetName
        if ($_ -eq 'vulnerability2') {
            $vnetRule = 'yes'
        } else {
            $vnetRule = ''
        }
        $newAcc = New-AzStorageAccount -ResourceGroupName NDC-Test `
                             -Name $storageAccountName `
                             -Location $(Get-AzResourceGroup -ResourceGroupName NDC-Test).Location `
                             -SkuName Standard_LRS `
                             -Kind StorageV2 `
                             -AccessTier Hot `
                             -Tag @{event="NDC Melbourne";deleteAfter="2020-08-01"; displayName="SQL Related Storage Account"} `
                             -EnableHttpsTrafficOnly $true `
                             -NetworkRuleSet (@{bypass="AzureServices"; defaultAction="Deny"}) `
                             -EnableHierarchicalNamespace $false `
                             -AllowBlobPublicAccess $false `
                             -MinimumTlsVersion TLS1_2 
        
        # If this is the Vulnerability account then update the NetworksACLs to allow the Client-Subnet
        if ($vnetRule) {
            # Get the existing Service Endpoints
            $endpoints = $(Get-AzVirtualNetworkSubnetConfig -ResourceId $($subnetID)).ServiceEndpoints
            # Get the deploy location
            $serverLocation = $((Get-AzResourceGroup NDC-Test).Location)
            # Get the new Service Endpoint
            Write-Host -ForegroundColor Yellow "Adding a Service Endpoint for 'Microsoft.Storage' to Subnet '$subnetName' for Location '$serverLocation'"
            $ServiceEndPoints = New-Object 'System.Collections.Generic.List[Microsoft.Azure.Commands.Network.Models.PSServiceEndpoint]'
            $ServiceEndPoint = [Microsoft.Azure.Commands.Network.Models.PSServiceEndpoint]::new()
            $ServiceEndPoint.Service = "Microsoft.Storage"
            $ServiceEndPoint.Locations = @("$serverLocation")
            $ServiceEndPoints.Add($ServiceEndPoint)
            # Retain the existing Service Endpoints, if any
            $ServiceEndPoints += $endpoints
            # Get the VNET to update
            $vnet = Get-AzVirtualNetwork -ResourceGroupName NDC-Test -Name NDC-VirtualNetwork 
            ## Now we update the Subnet through the Virtual Network
            $vnet.Subnets.Where({$_.Name -eq "$subnetName"})[0].serviceEndpoints = $($ServiceEndPoints)
            $vnet.Subnets.Where({$_.Name -eq "$subnetName"})[0].PrivateEndpointNetworkPolicies = "Disabled"
            Set-AzVirtualNetwork -VirtualNetwork $vnet | Out-Null

            # Now the endpoints are ready, we can add a firewall rule
            Add-AzStorageAccountNetworkRule -ResourceGroupName NDC-Test -Name $storageAccountName -VirtualNetworkResourceId $subnet[0].Id | Out-Null
        }

        # Set the RBAC Role for the SQL Server identity
        New-AzRoleAssignment -ObjectId $($sp.Id) -RoleDefinitionName "Storage Blob Data Contributor" -Scope  "$($newAcc.Id)" | Out-Null
    }
} catch {
    throw "$($_.Exception.InnerException.Message)"
}


# Configure Auditing and Vulnerability Scans
## We need the following:
##     Configure the Audits to the Auditing Storage Account
##     Enabled Advanced Data Security 
##     Configure the Vulnerability Scans and Advanced Threat Protection
try {
    # Get the Storage Settings for the Audits and set the Auditing config
    Write-Host -ForegroundColor Yellow "Configuring Auditing on SQL Server $sqlServer to Storage Account sqlaudit$uniquifier"
    $auditStorageName = $(("sqlaudit$uniquifier").ToLower())
    Set-AzSqlServerAudit -ResourceGroupName NDC-Test -ServerName $sqlServer -BlobStorageTargetState Enabled -StorageAccountResourceId $(Get-AzStorageAccount -ResourceGroupName NDC-Test -Name $auditStorageName).Id -RetentionInDays 180 
    Write-Host -ForegroundColor Yellow "Completed configuring Auditing on SQL Server $sqlServer to Storage Account sqlaudit$uniquifier"

    # Get the Storage Settings for the Vulnerability Assessments and set the config
    Write-Host -ForegroundColor Yellow "Configuring Advanced Data Security on SQL Server $sqlServer to Storage Account sqlvulnerability$uniquifier"
    $vulnerabilityStorageName = $(("sqlvulnerability$uniquifier").ToLower())
    # Enable ADS without configuring Vulnerability Assessments - this prevents an additional Storage Account being created.
    Enable-AzSqlServerAdvancedDataSecurity -ResourceGroupName NDC-Test -ServerName $sqlServer -DoNotConfigureVulnerabilityAssessment | Out-Null
    # Now update it to configure the Vulnerability Scans

    #### There seems to be a bug with the PowerShell Cmdlet - so we need to set the Storage Account in the Portal
#    Update-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName NDC-Test -ServerName $sqlServer -StorageAccountName $vulnerabilityStorageName -ScanResultsContainerName 'vulnerability-assessment' 
#    Update-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName NDC-Test -ServerName $sqlServer -RecurringScansInterval Weekly -EmailAdmins $true -NotificationEmail @('dummy@nodomain.com')
    $portal = $false
    while (-not($portal)) {
        $val = Read-Host -Prompt "Add the Storage Account and retention propeties in the Portal. Enter 'done' once this has been completed"
        if ($val -eq 'done') {$portal = $true}
    }

    # Now complete the ADS configuration
    Update-AzSqlServerAdvancedThreatProtectionSetting -ResourceGroupName NDC-Test -ServerName $sqlServer -EmailAdmins $true -NotificationRecipientsEmails 'dummy@nodomain.com' -RetentionInDays 180
    Write-Host -ForegroundColor Yellow "Completed configuring Auditing on SQL Server $sqlServer to Storage Account sqlvulnerability$uniquifier"

} catch {
    throw "$($_.Exception.InnerException.Message)"
}


# Start a Vulnerability Scans
## We need the following:
##     Run a scan on-demand against the AdventureWorksLT database
try {
    # Start the Vulnerability Assessments
    Write-Host -ForegroundColor Yellow "Starting a Vulnerability Assessment of the AdventureWorksLT database on SQL Server $sqlServer"
    $ScanResult = Start-AzSqlDatabaseVulnerabilityAssessmentScan -ResourceGroupName NDC-Test -ServerName $SqlServer -DatabaseName 'AdventureWorksLT' -ScanId 'NDC-Test'
    Write-Host -ForegroundColor Yellow "Completed executing a Vulnerability Scan of AdventureWorksLT on SQL Server $sqlServer"
    Write-Host -ForegroundColor Magenta "Scan is available at: $($scanResult.ScanResultsLocationPath)"

} catch {
    throw "$($_.Exception.InnerException.Message)"
}


# Add Resource Locks for the deployed resources
## We need the following:
##     Do Not Delete lock on the Audits Storage Account
##     Do Not Delete lock on the Vulnerability Scan Storage Account
try {
    $storagePrefixes = @("audit", "vulnerability")
    $storagePrefixes | ForEach-Object {
        $storageAccountName=$("sql$_$uniquifier").ToLower()
        Write-Host -ForegroundColor Yellow "Adding a Resource Lock for Storage Account '$storageAccountName'"
        New-AzResourceLock -ResourceGroupName NDC-Test -LockName "$storageAccountName-DeleteLock" -LockLevel CanNotDelete -LockNotes 'Storage Account should not be deleted.' -ResourceName $storageAccountName -ResourceType 'Microsoft.Storage/storageAccounts' -Force | Out-Null
    }
    Write-Host -ForegroundColor Yellow "Can Not Delete Resource Locks applied"
} catch {
    throw "$($_.Exception.InnerException.Message)"
}

# Update SQL Server connections to use Private Endpoints
## We need the following:
##     Create the Private Endpoint
##     Create the Private DNS Zone
##     Remove the VNET Firewall Rules
##     Remove Public Access
try {
    Write-Host -ForegroundColor Yellow "Configuring Private Link Endpoint for SQL Server '$sqlServer' to Subnet '$subnetName'"
    $privateEndpointConnection = New-AzPrivateLinkServiceConnection -Name "$sqlServer-privatelink" -PrivateLinkServiceId $(Get-AzSqlServer -ResourceGroupName NDC-Test -ServerName $sqlServer).ResourceId -GroupId "sqlServer" 
    $privateEndpoint = New-AzPrivateEndpoint -ResourceGroupName NDC-Test -Name "$sqlServer-PrivateEndpoint" -Location $((Get-AzResourceGroup NDC-Test).Location) -Subnet $subnet -PrivateLinkServiceConnection $privateEndpointConnection

    # Configure the Private DNS Zone
    Write-Host -ForegroundColor Yellow "Configuring Private DNS Zone"
    $zone = New-AzPrivateDnsZone -ResourceGroupName NDC-Test -Name "privatelink.database.windows.net" 
    $link  = New-AzPrivateDnsVirtualNetworkLink -ResourceGroupName NDC-Test -ZoneName "privatelink.database.windows.net" -Name "NDC-PrivateDNSLink" -VirtualNetworkId $((Get-AzVirtualNetwork -ResourceGroupName NDC-Test -Name NDC-VirtualNetwork).Id)  
    $config = New-AzPrivateDnsZoneConfig -Name "privatelink.database.windows.net" -PrivateDnsZoneId $zone.ResourceId
    $privateDnsZoneGroup = New-AzPrivateDnsZoneGroup -ResourceGroupName NDC-Test -PrivateEndpointName "$sqlServer-PrivateEndpoint" -name "SQLZoneGroup" -PrivateDnsZoneConfig $config

    # Remove the VNET Firewall Rules
    Write-Host -ForegroundColor Yellow "Removing the Virtual Network Firewall Rules from '$sqlServer'"
    ## We need to remove the Delete Lock forst of all then replace it afterwards
    $tmpLock = Get-AzResourceLock -ResourceGroupName NDC-Test -ResourceType 'microsoft.Sql/servers' -ResourceName $sqlServer
    $sqlLockName = $tmpLock.Name
    $tmpLock | Remove-AzResourceLock -Force | Out-Null
    Get-AzSqlServerVirtualNetworkRule -ResourceGroupName NDC-Test -ServerName $sqlServer | Foreach-Object {
        Remove-AzSqlServerVirtualNetworkRule -ResourceGroupName $($_.ResourceGroupName) -ServerName $($_.ServerName) -VirtualNetworkRuleName $($_.VirtualNetworkRuleName) | Out-Null
    }
    New-AzResourceLock -ResourceGroupName NDC-Test -LockName $sqlLockName -ResourceType 'microsoft.Sql/servers' -ResourceName $sqlServer -LockLevel 'CanNotDelete' -LockNotes 'SQL Server should not be deleted.'  -Force | Out-Null

    # Remove Public Access
    Write-Host -ForegroundColor Yellow "Removing Public Access from '$sqlServer'"
    Set-AzSqlServer -ResourceGroupName NDC-Test -ServerName $sqlServer -PublicNetworkAccess Disabled | Out-Null

    Write-Host -ForegroundColor Yellow "Completed configuring Private Link Endpoint for SQL Server '$sqlServer' to Subnet '$subnetName'"
} catch {
    throw "$($_.Exception.InnerException.Message)"
}
